@using Microsoft.AspNetCore.Mvc.TagHelpers
@model ReservationInputModel

@{
    ViewData["Title"] = "Make a reservation";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Make a Reservation for room:</h2>
<hr />
<h4>Room data:</h4>
<div class="d-flex">
    <div class="col-md-2 col-12 align-items-center d-flex justify-content-center">
        <img src="@Model.RoomImageUrl" alt="Room image" class="d-block w-100" />
    </div>
    <div>
        <p>RoomType: @Model.RoomType.ToString()</p>
        <p>Capacity: @Model.RoomCapacity</p>
        <p>AdultPrice: @Model.RoomAdultPrice$</p>
        <p>ChildrenPrice: @Model.RoomChildrenPrice$</p>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-action="Create">
            <div class="col-md-4 mx-auto col-12">
                <div asp-validation-summary="All" class="text-danger"></div>
                <div class="form-group">
                    <label asp-for="AccommodationDate" class="control-label"></label>
                    <input asp-for="AccommodationDate" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" id="acc-date" onchange="CheckDates()" />
                    <span asp-validation-for="AccommodationDate" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="ReleaseDate" class="control-label"></label>
                    <input asp-for="ReleaseDate" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" id="rel-date" onchange="CheckDates()" />
                    <span asp-validation-for="ReleaseDate" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <span class="text-danger d-none" id="date-inval">Invalid date!</span>
                </div>
                <div class="form-group">
                    <span class="text-danger d-none" id="date-error">The room is already reserved in that period.</span>
                </div>
                <div class="form-group">
                    <div class="checkbox">
                        <label>
                            <input asp-for="AllInclusive" id="all-incl" /> @Html.DisplayNameFor(model => model.AllInclusive)
                        </label>
                    </div>
                    <small><strong>Note:</strong> AllInclusive price: @Model.AllInclusivePrice</small>
                </div>
                <div class="form-group">
                    <div class="checkbox">
                        <label>
                            <input asp-for="Breakfast" id="breakfast" /> @Html.DisplayNameFor(model => model.Breakfast)
                        </label>
                    </div>
                    <small><strong>Note:</strong> Breakfast price: @Model.BreakfastPrice &diams; Breakfast included in allInclusive</small>
                </div>
            </div>
            <div class="col-md-12">
                <h5>Clients data:</h5>
                <small>Leave a row blank if necessary</small>
                @for (var i = 0; i < Model.RoomCapacity - 1; i++)
                {
                    var id = i.ToString();
                    <div class="d-flex justify-content-around border-dark">
                        <div class="form-group col-md-3 col-12">
                            <label asp-for="Clients[i].FullName" class="control-label"></label>
                            <input asp-for="Clients[i].FullName" class="form-control client-@id" />
                            <span asp-validation-for="Clients[i].FullName" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-3 col-12">
                            <label asp-for="Clients[i].Email" class="control-label"></label>
                            <input asp-for="Clients[i].Email" class="form-control client-@id" />
                            <span asp-validation-for="Clients[i].Email" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-3 col-12">
                            <div class="checkbox">
                                <label>
                                    <input asp-for="Clients[i].IsAdult" id="client-@id" /> @Html.DisplayNameFor(model => model.Clients[i].IsAdult)
                                </label>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="text-dark">
                Total price: <span id="price">0</span>
            </div>
            <div class="form-group">
                <input type="submit" value="Reserve" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>


@section Scripts{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        const childPrice = ;
        const adultPrice = ;
        const allInclusicePrice =;
        const breakfastPrice = ;

        let totalPrice = ;

        let isValidDate = false;

        document.body.addEventListener('keydown', this.handleInteraction);
        document.body.addEventListener('click', this.handleInteraction);
        document.body.addEventListener('scroll', this.handleInteraction);


        function handleInteraction() {
            totalPrice = 0;
            CheckClients();
            if (document.getElementById("all-incl").checked) {
                totalPrice += allInclusicePrice;
            }
            else if (document.getElementById("breakfast").checked) {
                totalPrice += breakfastPrice;
            }

            let pr = totalPrice;
            if (isValidDate) {
                const days = Math.round((new Date(document.getElementById("rel-date").value) - new Date(document.getElementById("acc-date").value)) / (1000 * 60 * 60 * 24));
                console.log("days: ",days);
                pr = pr * days;
            }
            document.getElementById("price").innerHTML = pr;
        }

        function CheckClients() {
            let total = ;
            @{
                var res = "";
                if (Model.RoomCapacity - 1 <= 0)
                {
                    res = "0";
                }
                else
                {
                    res = string.Join(',', Enumerable.Range(0, Model.RoomCapacity - 1));
                }
            }
            const indices = [@Html.Raw(res)];
            indices.forEach(index => {
                let areAllFilled = true;
                const allFieldsForPerson = document.getElementsByClassName(`client-${index}`);
                for (let node of allFieldsForPerson){
                    if (!(node && node.value)) {
                        areAllFilled = false;
                        break;
                    }
                }

                if (areAllFilled ) {
                    if (document.getElementById(`client-${index}`).checked) {
                        total += adultPrice;
                    }
                    else {
                        total += childPrice;
                    }
                }
            });
            totalPrice = total;
        }

        var periods;

        function CheckDates() {
            isValidDate = false;
            const accDate = document.getElementById("acc-date");
            const relDate = document.getElementById("rel-date");
            let isPresentValid = false;
            if (new Date(accDate.value) >= new Date(relDate.value) || new Date(accDate.value) < new Date()) {
                document.getElementById("date-inval").style = "display:block!important";
            }
            else {
                document.getElementById("date-inval").style = "display:none!important";
                isPresentValid = true;
            }
            if (accDate && accDate.value && relDate && relDate.value && isPresentValid) {
                let isTaken = false;
                periods.forEach(period => {
                    if ((period.start >= new Date(accDate.value) && period.start <= new Date(relDate.value)) ||
                        (period.end > new Date(accDate.value) && period.end <= new Date(relDate.value)) ||
                        (period.end >= new Date(relDate.value) && period.start <= new Date(accDate.value) )||
                        (period.end <= new Date(relDate.value) && period.start >= new Date(accDate.value))){
                        isTaken = true;
                    }
                });
                if (isTaken) {
                    document.getElementById("date-error").style = "display:block!important";
                }
                else {
                    document.getElementById("date-error").style = "display:none!important";
                    isValidDate = true;
                }
            }
        }

    </script>
}
